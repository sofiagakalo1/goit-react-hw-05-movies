{"version":3,"file":"static/js/835.8ace273f.chunk.js","mappings":"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","sources":["components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesList/MovieList.module.css?dfe6","components/MoviesList/MoviesList.jsx","webpack://goit-react-hw-05-movies/./src/components/messages/messages.module.css?2284","components/messages/messages.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","pages/MoviesPage/MoviesPage.jsx","utils/API/movies-api.js"],"sourcesContent":["import { Vortex } from 'react-loader-spinner';\nconst Loader = () => {\n  return (\n    <Vortex\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"vortex-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"vortex-wrapper\"\n      colors={['red', 'green', 'blue', 'yellow', 'orange', 'purple']}\n    />\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"MovieList_div__7vQSV\",\"ul\":\"MovieList_ul__gcpSg\",\"li\":\"MovieList_li__JsHXs\",\"link\":\"MovieList_link__VBVvD\",\"img\":\"MovieList_img__KZJTQ\",\"title\":\"MovieList_title__C6WXq\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './MovieList.module.css';\nimport NoPosterImg from '../../images/comingSoon.jpeg';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  const elements = movies.map(({ id, title, poster_path }) => {\n    if (poster_path) {\n      return (\n        <li key={id} className={css.li}>\n          <Link\n            to={`/movies/${id}`}\n            state={{ from: location }}\n            className={css.link}\n          >\n            <img\n              src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n              alt={title}\n              className={css.img}\n            />\n            <p className={css.title}>{title}</p>\n          </Link>\n        </li>\n      );\n    } else {\n      return (\n        <li key={id} className={css.li}>\n          <Link\n            to={`/movies/${id}`}\n            state={{ from: location }}\n            className={css.link}\n          >\n            <img src={NoPosterImg} alt={title} className={css.img} />\n            <p className={css.title}>{title}</p>\n          </Link>\n        </li>\n      );\n    }\n  });\n\n  return (\n    <div className={css.div}>\n      <ul className={css.ul}>{elements}</ul>\n    </div>\n  );\n};\nexport default MoviesList;\n\n// MoviesList.defaultProps = {\n//   movies: [],\n// };\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      poster_path: PropTypes.string,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"noResultsMessage_div\":\"messages_noResultsMessage_div__C1xZe\",\"noResultsMessage_h3\":\"messages_noResultsMessage_h3__A-E9j\",\"noResultsMessage_p\":\"messages_noResultsMessage_p__pAUD2\"};","import css from './messages.module.css';\n\nexport function noResultsMessage() {\n  return (\n    <div className={css.noResultsMessage_div}>\n      <h3 className={css.noResultsMessage_h3}>There are no results :(</h3>\n      <p className={css.noResultsMessage_p}>Try the other one :)</p>\n    </div>\n  );\n}\nexport function noReviewsMessage() {\n  return (\n    <div className={css.noReviewsMessage_div}>\n      <h3 className={css.noReviewsMessage_h3}>There are no reviews :(</h3>\n    </div>\n  );\n}\n\nexport function noCastMessage() {\n  return (\n    <div className={css.noReviewsMessage_div}>\n      <h3 className={css.noReviewsMessage_h3}>There is no info about cast :</h3>\n    </div>\n  );\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"SearchBar_searchbar__xBucJ\",\"searchForm\":\"SearchBar_searchForm__V6XO6\",\"searchForm_button\":\"SearchBar_searchForm_button__74xgm\",\"searchForm_button_label\":\"SearchBar_searchForm_button_label__vQ9KH\",\"searchForm_input\":\"SearchBar_searchForm_input__Mmbyc\",\"icon\":\"SearchBar_icon__EfDZn\"};","import { BsSearch } from 'react-icons/bs';\nimport { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport css from './SearchBar.module.css';\n\nconst SearchBar = ({ onSubmit, initialValue }) => {\n  const [search, setSearch] = useState(initialValue);\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    onSubmit(search);\n    // console.log(search);\n  };\n\n  const handleChange = event => {\n    setSearch(event.target.value);\n    // console.log(value);\n  };\n\n  return (\n    <div className={css.searchbar}>\n      <form onSubmit={handleSubmit} className={css.searchForm}>\n        <input\n          type=\"input\"\n          value={search}\n          onChange={handleChange}\n          className={css.searchForm_input}\n          placeholder=\"Search movie...\"\n        />\n        <button type=\"submit\" className={css.searchForm_button}>\n          <BsSearch className={css.icon} />\n          <span className={css.searchForm_button_label}>Search</span>\n        </button>\n      </form>\n    </div>\n  );\n};\nexport default SearchBar;\n\nSearchBar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMoviesBySearch } from '../../utils/API/movies-api';\nimport Loader from '../../components/Loader/Loader';\nimport MoviesList from '../../components/MoviesList/MoviesList';\nimport SearchBar from '../../components/SearchBar/SearchBar';\nimport { noResultsMessage } from '../../components/messages/messages';\n// import css from './MoviesPage.module.css';\n\nconst Movies = () => {\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isFetched, setIsFetched] = useState(false);\n  //   const [search, setSearch] = useState('');\n  //щоб людина могла побачити що вона знайшла, ми маємо зберігати її запит в стоці адреси, а не в локальному стейті.\n  const [searchParams, setSearchParams] = useSearchParams({ search: '' });\n  const search = searchParams.get('search');\n\n  const onSubmit = searchQuery => {\n    // console.log(searchQuery);\n    if (search === searchQuery) {\n      return;\n    }\n    setSearchParams({ search: searchQuery });\n    setSearchedMovies([]);\n  };\n  //   console.log(search);\n\n  useEffect(() => {\n    if (!search) {\n      return;\n    }\n    const fetchMovies = async () => {\n      // console.log(search);\n      try {\n        const response = await getMoviesBySearch(search);\n        const { results } = response.data;\n        // console.log(results);\n        setSearchedMovies([...results]);\n        setIsFetched(true);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n        noResultsMessage();\n      }\n    };\n    fetchMovies();\n  }, [search]);\n\n  const noResult = searchedMovies.length < 1 && isFetched;\n\n  return (\n    <>\n      {/* <h1>Movies</h1> */}\n      {error && <h1>error...</h1>}\n      <SearchBar onSubmit={onSubmit} initialValue={search} />\n      {loading && <Loader />}\n      {searchedMovies.length > 0 && <MoviesList movies={searchedMovies} />}\n      {noResult && noResultsMessage()}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';  \n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params:{\n        api_key: '8b3b87955e63e3e9950b3cf9b384a483',\n    }\n})\n\nexport async function getTrendingMovies(){\n    const query = '/trending/movie/day?';\n        const response  = await instance.get(query);\n        return response;\n    }\n\n    export async function getMovieDetailsById(movieId){\n        const query = `/movie/${movieId}?`;\n        const response = await instance.get(query);\n        return response;\n    }\n\n    export async function getMoviesBySearch(search){\n        const query = `/search/movie?query=${search}`;\n        const response = await instance.get(query);\n        return response;\n    }\n\n    export async function getMovieCast(movieId){\n        const query = `/movie/${movieId}/credits?`;\n        const response = await instance.get(query);\n        return response;\n    }\n\n    export async function getMovieReviews(movieId){\n        const query = `/movie/${movieId}/reviews?`;\n        const response = await instance.get(query);\n        return response;\n    }"],"names":["visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","movies","location","useLocation","elements","map","id","title","poster_path","className","css","to","state","from","src","alt","NoPosterImg","noResultsMessage","noReviewsMessage","noCastMessage","onSubmit","initialValue","useState","search","setSearch","event","preventDefault","type","value","onChange","target","placeholder","searchedMovies","setSearchedMovies","loading","setLoading","error","setError","isFetched","setIsFetched","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchMovies","getMoviesBySearch","response","results","data","message","noResult","length","searchQuery","Loader","MoviesList","instance","axios","baseURL","params","api_key","getTrendingMovies","getMovieDetailsById","movieId","query","getMovieCast","getMovieReviews"],"sourceRoot":""}