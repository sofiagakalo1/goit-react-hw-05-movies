{"version":3,"file":"static/js/680.9ec66857.chunk.js","mappings":"4JAeA,IAde,WACb,OACE,SAAC,KAAD,CACEA,SAAS,EACTC,OAAO,KACPC,MAAM,KACNC,UAAU,iBACVC,aAAc,CAAC,EACfC,aAAa,iBACbC,OAAQ,CAAC,MAAO,QAAS,OAAQ,SAAU,SAAU,WAG1D,C,2ECZD,EAAsB,uBAAtB,EAAkD,sBAAlD,EAA6E,sBAA7E,EAA0G,wBAA1G,EAAwI,uBAAxI,EAAuK,yB,SC6BvK,EA3BmB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEXC,EAAWH,EAAOI,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,eAAaC,UAAWC,EAAxB,UACE,UAAC,KAAD,CACEC,GAAE,kBAAaL,GACfM,MAAO,CAAEC,KAAMX,GACfO,UAAWC,EAHb,WAKE,gBACEI,IAAG,0CAAqCN,GACxCO,IAAKR,EACLE,UAAWC,KAEb,cAAGD,UAAWC,EAAd,SAA0BH,QAXrBD,EAeZ,IACD,OACE,gBAAKG,UAAWC,EAAhB,UACE,eAAID,UAAWC,EAAf,SAAwBN,KAG7B,C,kHCQD,UA/BiB,WACf,OAA4CY,EAAAA,EAAAA,UAAS,IAArD,eAAOC,EAAP,KAAuBC,EAAvB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,mCAAG,sGAEhBJ,GAAW,GAFK,UAGOK,EAAAA,EAAAA,MAHP,OAGVC,EAHU,OAKRC,EAAYD,EAASE,KAArBD,QACRT,EAAkBS,GANF,gDAQhBL,EAAS,KAAMO,SARC,yBAUhBT,GAAW,GAVK,4EAAH,qDAajBI,GACD,GAAE,KAED,gCACGH,IAAS,oDACTF,IAAW,SAAC,IAAD,KAEZ,SAAC,IAAD,CAAYlB,OAAQgB,MAGzB,C,sLCjCKa,E,OAAWC,EAAAA,OAAa,CAC1BC,QAAS,+BACTC,OAAO,CACHC,QAAS,sCAIV,SAAeT,IAAtB,4CAAO,OAAP,oBAAO,0FACW,uBADX,SAEyBK,EAASK,IADvB,wBADX,cAEOT,EAFP,yBAGQA,GAHR,kEAMI,SAAeU,EAAtB,+CAAO,OAAP,oBAAO,WAAmCC,GAAnC,gFACGC,EADH,iBACqBD,EADrB,cAEoBP,EAASK,IAAIG,GAFjC,cAEGZ,EAFH,yBAGIA,GAHJ,kEAMA,SAAea,EAAtB,+CAAO,OAAP,oBAAO,WAAiCC,GAAjC,gFACGF,EADH,8BACkCE,GADlC,SAEoBV,EAASK,IAAIG,GAFjC,cAEGZ,EAFH,yBAGIA,GAHJ,kEAMA,SAAee,EAAtB,+CAAO,OAAP,oBAAO,WAA4BJ,GAA5B,gFACGC,EADH,iBACqBD,EADrB,sBAEoBP,EAASK,IAAIG,GAFjC,cAEGZ,EAFH,yBAGIA,GAHJ,kEAMA,SAAegB,EAAtB,+CAAO,OAAP,oBAAO,WAA+BL,GAA/B,gFACGC,EADH,iBACqBD,EADrB,sBAEoBP,EAASK,IAAIG,GAFjC,cAEGZ,EAFH,yBAGIA,GAHJ,kE","sources":["components/Loader/Loader.jsx","webpack://goit-react-hw-05-movies/./src/components/MoviesList/MovieList.module.css?dfe6","components/MoviesList/MoviesList.jsx","pages/HomePage/HomePage.jsx","utils/API/movies-api.js"],"sourcesContent":["import { Vortex } from 'react-loader-spinner';\nconst Loader = () => {\n  return (\n    <Vortex\n      visible={true}\n      height=\"80\"\n      width=\"80\"\n      ariaLabel=\"vortex-loading\"\n      wrapperStyle={{}}\n      wrapperClass=\"vortex-wrapper\"\n      colors={['red', 'green', 'blue', 'yellow', 'orange', 'purple']}\n    />\n  );\n};\n\nexport default Loader;\n","// extracted by mini-css-extract-plugin\nexport default {\"div\":\"MovieList_div__7vQSV\",\"ul\":\"MovieList_ul__gcpSg\",\"li\":\"MovieList_li__JsHXs\",\"link\":\"MovieList_link__VBVvD\",\"img\":\"MovieList_img__KZJTQ\",\"title\":\"MovieList_title__C6WXq\"};","import { Link, useLocation } from 'react-router-dom';\nimport css from './MovieList.module.css';\n\nconst MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  const elements = movies.map(({ id, title, poster_path }) => {\n    return (\n      <li key={id} className={css.li}>\n        <Link\n          to={`/movies/${id}`}\n          state={{ from: location }}\n          className={css.link}\n        >\n          <img\n            src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n            alt={title}\n            className={css.img}\n          />\n          <p className={css.title}>{title}</p>\n        </Link>\n      </li>\n    );\n  });\n  return (\n    <div className={css.div}>\n      <ul className={css.ul}>{elements}</ul>\n    </div>\n  );\n};\nexport default MoviesList;\n","import { useState, useEffect } from 'react';\nimport { getTrendingMovies } from '../../utils/API/movies-api';\nimport MoviesList from '../../components/MoviesList/MoviesList';\nimport Loader from '../../components/Loader/Loader';\n// import css from './HomePage.module.css';\n\nconst HomePage = () => {\n  const [trendingMovies, setTrendingMovies] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchMovies = async () => {\n      try {\n        setLoading(true);\n        const response = await getTrendingMovies();\n        // console.log(response); //response and data are objects // results is array of objects// response-data-results\n        const { results } = response.data;\n        setTrendingMovies(results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMovies();\n  }, []);\n  return (\n    <>\n      {error && <h1>Something went wrong...</h1>}\n      {loading && <Loader />}\n      {/* <h1>HomePage</h1> */}\n      <MoviesList movies={trendingMovies} />\n    </>\n  );\n};\n\nexport default HomePage;\n","import axios from 'axios';  \n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params:{\n        api_key: '8b3b87955e63e3e9950b3cf9b384a483',\n    }\n})\n\nexport async function getTrendingMovies(){\n    const query = '/trending/movie/day?';\n        const response  = await instance.get(query);\n        return response;\n    }\n\n    export async function getMovieDetailsById(movieId){\n        const query = `/movie/${movieId}?`;\n        const response = await instance.get(query);\n        return response;\n    }\n\n    export async function getMoviesBySearch(search){\n        const query = `/search/movie?query=${search}`;\n        const response = await instance.get(query);\n        return response;\n    }\n\n    export async function getMovieCast(movieId){\n        const query = `/movie/${movieId}/credits?`;\n        const response = await instance.get(query);\n        return response;\n    }\n\n    export async function getMovieReviews(movieId){\n        const query = `/movie/${movieId}/reviews?`;\n        const response = await instance.get(query);\n        return response;\n    }"],"names":["visible","height","width","ariaLabel","wrapperStyle","wrapperClass","colors","movies","location","useLocation","elements","map","id","title","poster_path","className","css","to","state","from","src","alt","useState","trendingMovies","setTrendingMovies","loading","setLoading","error","setError","useEffect","fetchMovies","getTrendingMovies","response","results","data","message","instance","axios","baseURL","params","api_key","get","getMovieDetailsById","movieId","query","getMoviesBySearch","search","getMovieCast","getMovieReviews"],"sourceRoot":""}